image: pawankmr301/alpine-eia:latest

stages:
    - build_artifact
    - build_docker_image
    - deploy_uat
    - deploy_prod
    
.build-artifact:
  stage: build_artifact
  image: pawankmr301/alpine-eia:latest
  services:
  - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
  script:
    - mvn clean install
    - ls -ld *
  artifacts:
    paths:
      - target/spring-eureka-server*.jar
  only:
    - branches

.build-docker-image:
  stage: build_docker_image
  image: docker:stable

  services:
    - docker:dind
  
  variables:
    CI_PROJECT_PATH: pawankmr301/spring-eureka
    CONTAINER_IMAGE: hub.docker.com/$CI_PROJECT_PATH
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2

  before_script:
    - echo "useme123" | docker login --username pawankmr301 --password-stdin

  script:
    - docker pull $CONTAINER_IMAGE:latest || true
    - docker build -t ${CI_PROJECT_NAME}:latest .
    - docker tag ${CI_PROJECT_NAME}:latest pawankmr301/${CI_PROJECT_NAME}
    - test ! -z "${CI_PROJECT_NAME}" && docker push pawankmr301/${CI_PROJECT_NAME}
    - docker push pawankmr301/${CI_PROJECT_NAME}:latest
  dependencies:
    - build-artifact

deployment-uat:
  stage: deploy_uat
  image: pawankmr301/alpine-eia:latest
  script:
    - git clone https://github.com/pawankmr301/helmchart.git
    - mkdir .kube
    - cp helmchart/config .kube/config
    - export_kubeconfig
    - ensure_namespace
    - install_tiller
    - instal_helm_chart

.deploy-uat:
  stage: deploy_uat
  image: pawankmr301/alpine-eia:latest
  script:
    - export_kubeconfig
    - ensure_namespace
    - install_tiller
    - instal_helm_chart

.auto_devops: &auto_devops |
  # Auto DevOps variables and functions
  [[ "$TRACE" ]] && set -x

  export CI_APPLICATION_REPOSITORY=$CI_REGISTRY_IMAGE/auto-deploy-app
  export CI_APPLICATION_TAG=$CI_COMMIT_SHA
  export CI_CONTAINER_NAME=ci_job_build_${CI_JOB_ID}
  export KUBE_NAMESPACE=default
  export TILLER_NAMESPACE=kube-system
  export ipaddress=192.168.99.101
  export helm_chart_name=amwaychart
  

  function install_tiller() {
      set -x
      echo "Checking Tiller..."

      #wget http://$ipaddress:8081/repository/testrepo/rbac-config.yaml
      #wget -c  http://$ipaddress:8081/repository/testrepo/config -O .kube/config

      if kubectl get serviceaccount --kubeconfig=.kube/config -n $TILLER_NAMESPACE | grep tiller
      then
          echo "serviceaccount Account already there"
      else
          kubectl create serviceaccount --namespace kube-system tiller  --kubeconfig=.kube/config
          kubectl create clusterrolebinding tiller-cluster-rule --clusterrole=cluster-admin --serviceaccount=kube-system:tiller  --kubeconfig=.kube/config
          kubectl patch deploy --namespace kube-system tiller-deploy -p '{"spec":{"template":{"spec":{"serviceAccount":"tiller"}}}}'  --kubeconfig=.kube/config
          export KUBECONFIG=.kube/config
          helm init --service-account tiller --upgrade
      fi
  }

  function deploy_helm () {
    helm template amway-chart/
    helm install --name amway amway-chart --set image.repository=pawankmr301/alpine-eia --set image.tag=latest --set service.type=LoadBalancer --set service.port=80
  }

  function ensure_namespace() {
      #wget -c  http://$ipaddress:8081/repository/testrepo/config -O .kube/config
      kubectl describe namespace "$KUBE_NAMESPACE" --kubeconfig=.kube/config || kubectl create namespace "$KUBE_NAMESPACE" --kubeconfig=.kube/config
  }

  function setup_docker() {
      if ! docker info &>/dev/null
      then
        if [ -z "$DOCKER_HOST" -a "$KUBERNETES_PORT" ]
        then
          export DOCKER_HOST='tcp://localhost:2375'
        fi
      fi
  }

  function export_kubeconfig {
      export KUBECONFIG=$HOME/.kube/config
  }

  function instal_helm_chart {
      export KUBECONFIG=$HOME/.kube/config
      helm install $helm_chart_name
  }

  function codeclimate() {
    docker pull codeclimate/codeclimate:0.69.0 
    docker run --env CODECLIMATE_CODE="$PWD" --volume "$PWD":/code --volume /var/run/docker.sock:/var/run/docker.sock --volume /tmp/cc:/tmp/cc codeclimate/codeclimate:0.69.0 init
    docker run --env CODECLIMATE_CODE="$PWD" --volume "$PWD":/code --volume /var/run/docker.sock:/var/run/docker.sock --volume /tmp/cc:/tmp/cc codeclimate/codeclimate:0.69.0 analyze -f json > codeclimate.json
  }

before_script:
- *auto_devops